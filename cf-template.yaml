AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  GetPresignedUrlImg:
    Type: String
    Description: ECR Image URI for getpresigned Lambda

  GetPostDetailImg:
    Type: String
    Description: ECR Image URI for GetPostDetail Lambda

  UploadPostImg:
    Type: String
    Description: ECR Image URI for UploadPost Lambda

  DeletePostImg:
    Type: String
    Description: ECR Image URI for DeletePost Lambda

  GetPostListImg:
    Type: String
    Description: ECR Image URI for GetPostList Lambda

  GetMyListImg:
    Type: String
    Description: ECR Image URI for GetMyList Lambda

  UpdateMyPostImg:
    Type: String
    Description: ECR Image URI for GetMyList Lambda

  AddCollectionImg:
    Type: String
    Description: ECR Image URI for AddCollection Lambda

  GetCollectionListImg:
    Type: String
    Description: ECR Image URI for GetCollectionList Lambda

  CognitoArn:
    Type: String
    Description: cog-arn

Resources:
  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: rentalninjia-test
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket Policy
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn   # Restrict access to Lambda execution role
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource:
              - arn:aws:s3:::rentalninjia-test/*


  ######
  # DynamoDB Table
  PostTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: posts_test
      AttributeDefinitions:
        - AttributeName: post_id_test
          AttributeType: S
      KeySchema:
        - AttributeName: post_id_test
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  ######



  # Lambda Function for Get Post Detail API (Using ECR)
  GetPresignedUrl:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: get-presigned-url
      PackageType: Image
      Code:
        ImageUri: !Ref GetPresignedUrlImg
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 15

  GetPostDetail:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: get-post-detail
      PackageType: Image
      Code:
        ImageUri: !Ref GetPostDetailImg
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 15

  UploadPost:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: upload-post
      PackageType: Image
      Code:
        ImageUri: !Ref UploadPostImg
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 15

  DeletePost:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: delete-post
      PackageType: Image
      Code:
        ImageUri: !Ref DeletePostImg
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 15

  GetPostList:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: get-post-list
      PackageType: Image
      Code:
        ImageUri: !Ref GetPostListImg
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 15

  GetMyList:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: get-my-list
      PackageType: Image
      Code:
        ImageUri: !Ref GetMyListImg
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 15

  UpdateMyPostInfo:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: update-my-post
      PackageType: Image
      Code:
        ImageUri: !Ref UpdateMyPostImg
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 15

  AddCollection:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: add-collection
      PackageType: Image
      Code:
        ImageUri: !Ref AddCollectionImg
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 15

  GetCollectionList:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: get-collection-list
      PackageType: Image
      Code:
        ImageUri: !Ref GetCollectionListImg
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 15


  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole-test-cf
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: dynamodb_and_cloudwatch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - logs:*
                Resource: "*"

        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::rentalninjia-test/*

  ######
  # API Gateway
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: postAppApi
      EndpointConfiguration:
        Types:
          - REGIONAL
    DependsOn:
      - GetPresignedUrl
      - GetPostDetail
      - UploadPost
      - DeletePost
      - GetPostList
      - GetMyList
      - UpdateMyPostInfo
      - AddCollection
      - GetCollectionList

  # Cognito Authorizer in API Gateway
  CognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      RestApiId: !Ref ApiGatewayRestApi
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !Ref CognitoArn

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetPresignedUrlMethod   # Ensure methods are created before deployment
      - GetPresignedOptionsMethod
      - GetPostDetailMethod
      - GetPostDetailOptionsMethod
      - UploadPostMethod
      - UploadPostOptionsMethod
      - DeletePostMethod
      - DeletePostOptionsMethod
      - GetPostListMethod
      - GetPostListOptionsMethod
      - GetMyListMethod
      - GetMyListOptionsMethod
      - UpdateMyPostInfoMethod
      - UpdateMyPostInfoOptionsMethod
      - AddCollectionMethod
      - AddCollectionOptionsMethod
      - GetCollectionListMethod
      - GetCollectionListOptionsMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: test-cf


  # API Gateway Resource for get presigned url API
  GetPresignedUrlResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: get-presigned-url
      RestApiId: !Ref ApiGatewayRestApi

  # API Gateway Resource for Get Post Detail API
  GetPostDetailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: get-post-detail
      RestApiId: !Ref ApiGatewayRestApi

  # API Gateway Resource for Upload Post API
  UploadPostResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: upload-post
      RestApiId: !Ref ApiGatewayRestApi

  # API Gateway Resource for Upload Post API
  DeletePostResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: delete-post
      RestApiId: !Ref ApiGatewayRestApi

  # API Gateway Resource for Upload Post API
  GetPostListResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: get-post-list
      RestApiId: !Ref ApiGatewayRestApi

  GetMyListResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: get-my-list
      RestApiId: !Ref ApiGatewayRestApi

  UpdateMyPostInfoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: update-my-post
      RestApiId: !Ref ApiGatewayRestApi

  AddCollectionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: add-collection
      RestApiId: !Ref ApiGatewayRestApi

  GetCollectionListResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: get-collection-list
      RestApiId: !Ref ApiGatewayRestApi

  ### Function1
  # API Gateway Method for Get Post Detail API
  GetPresignedUrlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref GetPresignedUrlResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPresignedUrl.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS Method for CORS
  GetPresignedOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref GetPresignedUrlResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  # Lambda Permissions for API Gateway to Invoke Lambda
  GetPresignedUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetPresignedUrl
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/get-presigned-url


  ### Function2

  # API Gateway Method for Get Post Detail API
  GetPostDetailMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref GetPostDetailResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPostDetail.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS Method for CORS
  GetPostDetailOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref GetPostDetailResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  # Lambda Permissions for API Gateway to Invoke Lambda
  GetPostDetailPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetPostDetail
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/get-post-detail

  ### Function 3
  # API Gateway Method for Upload Post API
  UploadPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref UploadPostResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadPost.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS Method for CORS
  UploadPostOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref UploadPostResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  # Lambda Permissions for API Gateway to Invoke Lambda
  UploadPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UploadPost
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/upload-post


  ### Function 4
  # API Gateway Method for Delete Post API
  DeletePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref DeletePostResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePost.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS Method for CORS
  DeletePostOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref DeletePostResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  # Lambda Permissions for API Gateway to Invoke Lambda
  DeletePostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeletePost
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/delete-post

  ### Function 5
  # API Gateway Method for Get Post List API
  GetPostListMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref GetPostListResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPostList.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS Method for CORS
  GetPostListOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref GetPostListResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  # Lambda Permissions for API Gateway to Invoke Lambda
  GetPostListPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetPostList
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/get-post-list


### Function 6
  # API Gateway Method for Get Post List API
  GetMyListMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref GetMyListResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMyList.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS Method for CORS
  GetMyListOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref GetMyListResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  # Lambda Permissions for API Gateway to Invoke Lambda
  GetMyListPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetMyList
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/get-my-list


### Function 7
  # API Gateway Method for Get Post List API
  UpdateMyPostInfoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref UpdateMyPostInfoResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateMyPostInfo.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS Method for CORS
  UpdateMyPostInfoOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref UpdateMyPostInfoResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  # Lambda Permissions for API Gateway to Invoke Lambda
  UpdateMyPostInfoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateMyPostInfo
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/update-my-post

  ### Function 8
  # API Gateway Method for Get Post List API
  AddCollectionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref AddCollectionResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddCollection.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS Method for CORS
  AddCollectionOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref AddCollectionResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  # Lambda Permissions for API Gateway to Invoke Lambda
  AddCollectionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AddCollection
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/add-collection


  ### Function 9
  # API Gateway Method for Get Post List API
  GetCollectionListMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoAuthorizer
      ResourceId: !Ref GetCollectionListResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCollectionList.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS Method for CORS
  GetCollectionListOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId: !Ref GetCollectionListResource
      RestApiId: !Ref ApiGatewayRestApi
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true


  # Lambda Permissions for API Gateway to Invoke Lambda
  GetCollectionListPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetCollectionList
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/get-collection-list
